"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importStar)(require("react"));
const Form_1 = (0, tslib_1.__importDefault)(require("../Form"));
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
test('should call focus on child', () => {
    let didCall = false;
    let field = null;
    class DummyInput extends react_1.default.Component {
        focus() {
            didCall = true;
        }
        render() {
            return react_1.default.createElement("input", { className: "input", type: "text" });
        }
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { ref: handle => (field = handle), fieldName: "name", type: DummyInput })));
    field.focus();
    expect(didCall).toBe(true);
});
test('should pass parent value', () => {
    let checked = false;
    function DummyInput(props) {
        checked = true;
        expect(props.parentValue).toEqual({ hello: 'world' });
        return react_1.default.createElement("div", null);
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { hello: 'world' } },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput })));
    expect(checked).toBe(true);
});
test('should inherit field type props', () => {
    function DummyInput(props) {
        return react_1.default.createElement("div", null);
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { hello: 'world' } },
        react_1.default.createElement(Field_1.default, { fieldName: "hello", type: DummyInput, name: "ss2ss" })));
});
test('should be able to add any prop to the field', () => {
    let checked = false;
    function DummyInput(props) {
        checked = true;
        expect(props.parentValue).toEqual({ hello: 'world' });
        return react_1.default.createElement("div", null, "dummy");
    }
    (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { hello: 'world' } },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput, passingProp: 100 })));
    expect(checked).toBe(true);
});
test('should allow using nested field with onChange', async () => {
    function HelloInput(props) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("input", { value: props.value, onChange: event => props.onChange(event.target.value), placeholder: "hello", className: "input", type: "text" })));
    }
    function ItemsInput(props) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("button", { onClick: () => {
                    props.onChange(oldVal => {
                        return [...oldVal, { hello: oldVal.length }];
                    });
                } }, "add"),
            props.value.map((item, index) => {
                return react_1.default.createElement(Field_1.default, { key: index, fieldName: String(`${index}.hello`), type: HelloInput });
            })));
    }
    let testValue = null;
    function Test() {
        const [state, setState] = (0, react_1.useState)({ items: [] });
        testValue = state;
        return (react_1.default.createElement(Form_1.default, { state: state, onChange: setState },
            react_1.default.createElement(Field_1.default, { fieldName: "items", type: ItemsInput })));
    }
    (0, react_2.render)(react_1.default.createElement(Test, null));
    await (0, react_2.act)(async () => {
        react_2.fireEvent.click(react_2.screen.getByText('add'));
    });
    await (0, react_2.act)(async () => {
        react_2.fireEvent.change(react_2.screen.getByPlaceholderText('hello'), { target: { value: 'no' } });
    });
    await (0, react_2.act)(async () => {
        react_2.fireEvent.click(react_2.screen.getByText('add'));
        react_2.fireEvent.click(react_2.screen.getByText('add'));
        react_2.fireEvent.click(react_2.screen.getByText('add'));
    });
    expect(testValue).toEqual({ items: [{ hello: 'no' }, { hello: 1 }, { hello: 2 }, { hello: 3 }] });
});
test('should allow using nested array field', async () => {
    function HelloInput(props) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("input", { value: props.value || '', onChange: event => props.onChange(event.target.value), placeholder: props.fieldName, className: "input", type: "text" })));
    }
    function InterInput(props) {
        return react_1.default.createElement(Field_1.default, { fieldName: "hello", type: HelloInput });
    }
    let testValue = null;
    function Test() {
        const [state, setState] = (0, react_1.useState)({});
        testValue = state;
        return (react_1.default.createElement(Form_1.default, { state: state, onChange: setState },
            react_1.default.createElement(Field_1.default, { fieldName: "items.0", type: InterInput }),
            react_1.default.createElement(Field_1.default, { fieldName: "items.1", type: InterInput })));
    }
    (0, react_2.render)(react_1.default.createElement(Test, null));
    await (0, react_2.act)(async () => {
        react_2.fireEvent.change(react_2.screen.getByPlaceholderText('items.0.hello'), { target: { value: 'no0' } });
    });
    await (0, react_2.act)(async () => {
        react_2.fireEvent.change(react_2.screen.getByPlaceholderText('items.1.hello'), { target: { value: 'no1' } });
    });
    expect(testValue).toEqual({ items: ['no0', 'no1'] });
});
//# sourceMappingURL=index.test.js.map