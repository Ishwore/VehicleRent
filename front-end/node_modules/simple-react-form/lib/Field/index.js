"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importStar)(require("react"));
const omit_1 = (0, tslib_1.__importDefault)(require("lodash/omit"));
const get_1 = (0, tslib_1.__importDefault)(require("lodash/get"));
const Contexts_1 = require("../Contexts");
const types_1 = require("../types");
function FieldInner(props, ref) {
    const parentValue = (0, react_1.useContext)(Contexts_1.ValueContext);
    const errorMessages = (0, react_1.useContext)(Contexts_1.ErrorMessagesContext) || {};
    const onChange = (0, react_1.useContext)(Contexts_1.OnChangeContext);
    const parentFieldName = (0, react_1.useContext)(Contexts_1.ParentFieldNameContext);
    const fieldName = (0, react_1.useMemo)(() => {
        if (parentFieldName) {
            if (props.fieldName) {
                return `${parentFieldName}.${props.fieldName}`;
            }
            else {
                return parentFieldName;
            }
        }
        else {
            return props.fieldName;
        }
    }, [parentFieldName, props.fieldName]);
    const errorMessage = (0, react_1.useMemo)(() => {
        return props.errorMessage || errorMessages[fieldName] || (0, get_1.default)(errorMessages, fieldName);
    }, [fieldName, props.errorMessage, errorMessages]);
    const childProps = (0, react_1.useMemo)(() => {
        const propOptions = (0, omit_1.default)(props, ['fieldName', 'type', 'errorMessage']);
        const allowedKeys = [...types_1.fieldPropsKeys, 'type'];
        const passProps = (0, omit_1.default)(propOptions, allowedKeys);
        return {
            ...propOptions,
            value: (0, get_1.default)(parentValue || {}, props.fieldName),
            parentValue: parentValue || {},
            onChange: newValue => {
                return onChange(fieldName, newValue);
            },
            errorMessage,
            fieldName,
            passProps
        };
    }, [props, parentValue, fieldName, errorMessage]);
    const Component = props.type;
    const componentRef = Component.prototype.render ? ref : null;
    return (react_1.default.createElement(Contexts_1.ValueContext.Provider, { value: childProps.value },
        react_1.default.createElement(Contexts_1.ParentFieldNameContext.Provider, { value: childProps.fieldName },
            react_1.default.createElement(Component, { ...childProps, ref: componentRef }))));
}
const Field = (0, react_1.forwardRef)(FieldInner);
exports.default = Field;
//# sourceMappingURL=index.js.map