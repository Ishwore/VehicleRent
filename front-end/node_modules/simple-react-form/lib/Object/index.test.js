"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const Form_1 = (0, tslib_1.__importDefault)(require("../Form"));
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
const index_1 = (0, tslib_1.__importDefault)(require("./index"));
const prop_types_1 = (0, tslib_1.__importDefault)(require("prop-types"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
class DummyInput extends react_1.default.Component {
    render() {
        return (react_1.default.createElement("input", { value: this.props.value || '', onChange: event => {
                this.props.onChange(event.target.value);
            } }));
    }
}
DummyInput.propTypes = {
    value: prop_types_1.default.string,
    onChange: prop_types_1.default.func
};
it('should render correctly', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "object", type: index_1.default },
            react_1.default.createElement("div", { className: "children" }))));
    expect(container.querySelector('.children')).toBeInTheDocument();
});
it('should show an error if it has one', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { errorMessages: { item: 'I AM AN ERROR' } },
        react_1.default.createElement(Field_1.default, { fieldName: "item", type: index_1.default },
            react_1.default.createElement("div", { className: "children" }))));
    expect(container.querySelector('.srf_errorMessage')).toHaveTextContent('I AM AN ERROR');
});
it('should pass the value to the child field', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { object: { field: 'hello' } } },
        react_1.default.createElement(Field_1.default, { fieldName: "object", type: index_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "field", type: DummyInput }))));
    expect(container.querySelector('input')).toHaveValue('hello');
});
test('onChange should make changes correctly', () => {
    let state = { person: { name: 'Nicolás' } };
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: state, onChange: (changes) => (state = changes) },
        react_1.default.createElement(Field_1.default, { fieldName: "person", type: index_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput }))));
    react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'Joaquín' } });
    expect(state).toEqual({ person: { name: 'Joaquín' } });
});
//# sourceMappingURL=index.test.js.map