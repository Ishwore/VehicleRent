"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const Object_1 = (0, tslib_1.__importDefault)(require("../Object"));
const index_1 = (0, tslib_1.__importDefault)(require("./index"));
const react_2 = require("@testing-library/react");
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
require("@testing-library/jest-dom");
const test_utils_1 = require("react-dom/test-utils");
function DummyInput(props) {
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("div", { className: "errorMessage" }, props.errorMessage),
        react_1.default.createElement("input", { value: props.value || '', onChange: event => {
                props.onChange(event.target.value);
            } })));
}
test('Should render by default a <form>', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(index_1.default, null,
        react_1.default.createElement("div", null, "dummy")));
    expect(container.querySelector('form')).toBeInTheDocument();
});
test('Should not render a <form> if useFormTag is false', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(index_1.default, { useFormTag: false },
        react_1.default.createElement("div", null, "dummy")));
    expect(container.querySelector('form')).not.toBeInTheDocument();
});
test('onChange should dispatch on changes', async () => {
    const mockFn = jest.fn();
    const { container } = (0, react_2.render)(react_1.default.createElement(index_1.default, { onChange: mockFn },
        react_1.default.createElement(Field_1.default, { fieldName: "foo", type: DummyInput })));
    await (0, test_utils_1.act)(async () => {
        react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'foobar' } });
    });
    expect(mockFn.mock.calls[0][0]).toEqual({ foo: 'foobar' });
    await (0, test_utils_1.act)(async () => {
        react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'barfoo' } });
    });
    expect(mockFn.mock.calls[1][0]).toEqual({ foo: 'barfoo' });
});
it('should render the form correctly', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(index_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "foo", type: DummyInput })));
    expect(container.querySelector('form')).toBeInTheDocument();
    expect(container.querySelector('input')).toBeInTheDocument();
});
test('passes the errorMessage correctly', () => {
    const errorMessages = {
        'person.name': 'Error'
    };
    (0, react_2.render)(react_1.default.createElement(index_1.default, { errorMessages: errorMessages },
        react_1.default.createElement(Field_1.default, { fieldName: "person", type: Object_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput }))));
    expect(react_2.screen.getByText(errorMessages['person.name'])).toBeInTheDocument();
});
test('allows calling on submit using ref', () => {
    let form = null;
    const mockFn = jest.fn();
    const { container } = (0, react_2.render)(react_1.default.createElement(index_1.default, { ref: handle => (form = handle), onSubmit: mockFn },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput })));
    react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'Nicolás' } });
    react_2.fireEvent.submit(container.querySelector('form'));
    react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'Nico' } });
    form.submit();
    expect(mockFn.mock.calls[0][0]).toEqual({ name: 'Nicolás' });
    expect(mockFn.mock.calls[1][0]).toEqual({ name: 'Nico' });
});
test('test form html props', () => {
    (0, react_2.render)(react_1.default.createElement(index_1.default, { target: "/hello" },
        react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput })));
});
//# sourceMappingURL=index.test.js.map