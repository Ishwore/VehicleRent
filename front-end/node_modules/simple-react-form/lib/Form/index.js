"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importStar)(require("react"));
const omit_1 = (0, tslib_1.__importDefault)(require("lodash/omit"));
const isFunction_1 = (0, tslib_1.__importDefault)(require("lodash/isFunction"));
const getNewValue_1 = (0, tslib_1.__importDefault)(require("./getNewValue"));
const isReactNative_1 = (0, tslib_1.__importDefault)(require("../utility/isReactNative"));
const Contexts_1 = require("../Contexts");
const cloneDeep_1 = (0, tslib_1.__importDefault)(require("lodash/cloneDeep"));
const isNil_1 = (0, tslib_1.__importDefault)(require("lodash/isNil"));
const use_deep_compare_effect_1 = (0, tslib_1.__importDefault)(require("use-deep-compare-effect"));
function Form(props, ref) {
    const [state, setState] = (0, react_1.useState)((0, cloneDeep_1.default)(props.state) || {});
    const omitOnChangeEvent = (0, react_1.useRef)(true);
    const resetState = () => {
        setState((0, cloneDeep_1.default)(props.state));
    };
    (0, use_deep_compare_effect_1.default)(() => {
        if (!(0, isNil_1.default)(props.state)) {
            resetState();
        }
    }, [props.state || {}]);
    (0, use_deep_compare_effect_1.default)(() => {
        if (omitOnChangeEvent.current) {
            omitOnChangeEvent.current = false;
            return;
        }
        if ((0, isFunction_1.default)(props.onChange)) {
            props.onChange(state);
        }
    }, [state]);
    const onChange = (fieldName, fieldValue) => {
        setState(oldValue => (0, getNewValue_1.default)(oldValue, fieldName, fieldValue));
    };
    const submit = () => {
        if (!(0, isFunction_1.default)(props.onSubmit))
            return;
        return props.onSubmit(state);
    };
    const onFormSubmit = (event) => {
        event.preventDefault();
        return submit();
    };
    (0, react_1.useImperativeHandle)(ref, () => ({
        submit,
        getValue: () => state,
        reset: resetState
    }));
    const renderChild = () => {
        const domProps = (0, omit_1.default)(props, 'children', 'state', 'onChange', 'errorMessages', 'useFormTag', 'onSubmit');
        if ((0, isReactNative_1.default)()) {
            return props.children;
        }
        if (props.useFormTag !== false) {
            return (react_1.default.createElement("form", { ...domProps, onSubmit: onFormSubmit }, props.children));
        }
        else {
            return props.children;
        }
    };
    return (react_1.default.createElement(Contexts_1.ParentFieldNameContext.Provider, { value: null },
        react_1.default.createElement(Contexts_1.ErrorMessagesContext.Provider, { value: props.errorMessages },
            react_1.default.createElement(Contexts_1.OnChangeContext.Provider, { value: onChange },
                react_1.default.createElement(Contexts_1.ValueContext.Provider, { value: state }, renderChild())))));
}
exports.default = (0, react_1.forwardRef)(Form);
//# sourceMappingURL=index.js.map