import React, { ComponentProps, ElementType } from 'react';
export declare type FieldProps<TValue = any, TTypeExtraProps = {}> = {
    fieldName?: string;
    type?: ElementType<any>;
    value?: TValue;
    parentValue?: any;
    label?: React.ReactNode;
    errorMessage?: string;
    onChange?: (newValue: TValue) => any;
    fieldSchema?: object;
    schema?: object;
    passProps?: object;
    children?: React.ReactNode;
} & TTypeExtraProps;
export declare type FormFieldProps<TFieldType extends React.ElementType<any>> = {
    type: TFieldType;
    fieldName: string;
    errorMessage?: string;
} & ComponentProps<TFieldType>;
export declare const fieldPropsKeys: string[];
export declare type FormProps = Omit<React.HTMLProps<HTMLFormElement>, 'onChange'> & {
    children: React.ReactNode;
    state?: object;
    onChange?: Function;
    errorMessages?: object;
    useFormTag?: boolean;
    onSubmit?: (value: object) => any;
};
export interface FormRef {
    submit: () => any;
    getValue: () => object;
    reset: () => void;
}
//# sourceMappingURL=types.d.ts.map