import React from 'react';
import ObjectField from '../Object';
import { FieldProps } from '../types';
export declare type ArrayComponentProps = {
    errorMessages?: {
        [key: string]: string;
    };
    addLabel?: string;
    disabled?: boolean;
    showAddButton?: boolean;
    showRemoveButton?: boolean;
    removeLabel?: React.ReactNode;
    autoAddItem?: boolean;
    label?: React.ReactNode;
    children?: any;
    renderItem?: Function;
    renderProps?: boolean;
};
export default class ArrayComponent extends React.Component<FieldProps<any[], ArrayComponentProps>> {
    static defaultProps: Partial<ArrayComponentProps>;
    addItem(itemValue?: {}): void;
    getObjectField(): typeof ObjectField;
    removeItem(index: any): void;
    getChildrenComponents(item: any, index: any): any;
    renderChildren(): JSX.Element[];
    renderChildrenItem({ index, children }: {
        index: any;
        children: any;
    }): JSX.Element;
    renderChildrenItemWithContext({ index, children }: {
        index: number;
        children: any;
    }): JSX.Element;
    renderButton(onClick: any, label: any, className: any): JSX.Element;
    renderErrorMessage(): JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=index.d.ts.map