"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const isArray_1 = (0, tslib_1.__importDefault)(require("lodash/isArray"));
const without_1 = (0, tslib_1.__importDefault)(require("lodash/without"));
const Object_1 = (0, tslib_1.__importDefault)(require("../Object"));
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
const Contexts_1 = require("../Contexts");
const defaultProps = {
    addLabel: 'Add',
    removeLabel: 'Remove',
    errorMessages: {},
    autoAddItem: false,
    showAddButton: true,
    showRemoveButton: true,
    renderProps: false
};
class ArrayComponent extends react_1.default.Component {
    addItem(itemValue = {}) {
        var newArray = this.props.value;
        if ((0, isArray_1.default)(newArray)) {
            newArray.push(itemValue);
        }
        else {
            newArray = [itemValue];
        }
        this.props.onChange(newArray);
    }
    getObjectField() {
        return Object_1.default;
    }
    removeItem(index) {
        const value = this.props.value || [];
        var newArray = (0, without_1.default)(value, value[index]);
        this.props.onChange(newArray);
    }
    getChildrenComponents(item, index) {
        if (this.props.renderItem)
            return this.props.renderItem(item, index);
        if (this.props.children)
            return this.props.children;
    }
    renderChildren() {
        const value = this.props.value || [];
        if (this.props.autoAddItem && !this.props.disabled && value.length === 0) {
            value.push({});
        }
        return value.map((item, index) => {
            const children = this.getChildrenComponents(item, index);
            return this.renderChildrenItem({ index, children });
        });
    }
    renderChildrenItem({ index, children }) {
        const button = this.props.showRemoveButton
            ? this.renderButton(() => this.removeItem(index), this.props.removeLabel, 'srf_removeButton')
            : null;
        return (react_1.default.createElement("div", { style: { marginTop: 20, marginBottom: 20, padding: 20 }, key: `${this.props.fieldName}.${index}` },
            this.renderChildrenItemWithContext({ index, children }),
            button));
    }
    renderChildrenItemWithContext({ index, children }) {
        return (react_1.default.createElement(Contexts_1.ParentFieldNameContext.Provider, { key: index, value: this.props.fieldName },
            react_1.default.createElement(Field_1.default, { fieldName: String(index), type: this.getObjectField() }, this.props.renderProps ? children(index) : children)));
    }
    renderButton(onClick, label, className) {
        return (react_1.default.createElement("div", { style: { marginTop: 10 } },
            react_1.default.createElement("button", { type: "button", className: className, onClick: onClick }, label)));
    }
    renderErrorMessage() {
        if (!this.props.errorMessage)
            return;
        return (react_1.default.createElement("div", { style: { color: 'red' }, className: "srf_errorMessage" }, this.props.errorMessage));
    }
    render() {
        return (react_1.default.createElement("div", { className: "srf-array-container", style: { marginTop: 20 } },
            react_1.default.createElement("div", null,
                react_1.default.createElement("b", null, this.props.label)),
            this.renderErrorMessage(),
            this.renderChildren(),
            this.props.showAddButton
                ? this.renderButton(() => this.addItem(), this.props.addLabel, 'srf_addButton')
                : null));
    }
}
exports.default = ArrayComponent;
ArrayComponent.defaultProps = defaultProps;
//# sourceMappingURL=index.js.map