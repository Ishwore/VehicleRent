"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const Form_1 = (0, tslib_1.__importDefault)(require("../Form"));
const Field_1 = (0, tslib_1.__importDefault)(require("../Field"));
const index_1 = (0, tslib_1.__importDefault)(require("./index"));
const Object_1 = (0, tslib_1.__importDefault)(require("../Object"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
function DummyInput(props) {
    return (react_1.default.createElement("input", { name: props.fieldName, className: "test-input", value: props.value || '', onChange: event => {
            props.onChange(event.target.value);
        } }));
}
it('should render correctly', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "array", type: index_1.default })));
    expect(container.querySelector('.srf-array-container')).toBeInTheDocument();
});
it('addItem should add an item', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "array", type: index_1.default },
            react_1.default.createElement("div", { className: "children" }))));
    expect(container.querySelector('.children')).not.toBeInTheDocument();
    react_2.fireEvent.click(react_2.screen.getByText('Add'));
    expect(container.querySelector('.children')).toBeInTheDocument();
});
it('removeItem should remove the item', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "array", type: index_1.default },
            react_1.default.createElement("div", { className: "children" }))));
    react_2.fireEvent.click(react_2.screen.getByText('Add'));
    expect(container.querySelector('.children')).toBeInTheDocument();
    react_2.fireEvent.click(react_2.screen.getByText('Remove'));
    expect(container.querySelector('.children')).not.toBeInTheDocument();
});
it('should render an error if there is one', () => {
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, null,
        react_1.default.createElement(Field_1.default, { fieldName: "array", type: index_1.default, errorMessage: "I AM AN ERROR" })));
    expect(container.querySelector('.srf_errorMessage')).toBeInTheDocument();
});
it('should pass the value to the child fields', () => {
    const item = { name: 'hello', text: 'bye' };
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: { items: [item] } },
        react_1.default.createElement(Field_1.default, { fieldName: "items", type: index_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput }),
            react_1.default.createElement(Field_1.default, { fieldName: "text", type: DummyInput }))));
    expect(container.getElementsByTagName('input')[0].value).toBe('hello');
    expect(container.getElementsByTagName('input')[1].value).toBe('bye');
});
test('onChange should make changes correctly', () => {
    let state = { persons: [{ name: 'Nicolás' }] };
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: state, onChange: changes => (state = changes) },
        react_1.default.createElement(Field_1.default, { fieldName: "persons", type: index_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput }))));
    react_2.fireEvent.change(container.querySelector('.test-input'), { target: { value: 'Joaquín' } });
    expect(state).toEqual({ persons: [{ name: 'Joaquín' }] });
});
test('onChange should make changes correctly on double array', () => {
    let state = {
        person: {
            friends: [{ name: 'Nicolás' }]
        }
    };
    const { container } = (0, react_2.render)(react_1.default.createElement(Form_1.default, { state: state, onChange: changes => (state = changes) },
        react_1.default.createElement(Field_1.default, { fieldName: "person", type: Object_1.default },
            react_1.default.createElement(Field_1.default, { fieldName: "friends", type: index_1.default },
                react_1.default.createElement(Field_1.default, { fieldName: "name", type: DummyInput })))));
    react_2.fireEvent.change(container.querySelector('input'), { target: { value: 'Joaquín' } });
    expect(state).toEqual({
        person: {
            friends: [{ name: 'Joaquín' }]
        }
    });
});
//# sourceMappingURL=index.test.js.map